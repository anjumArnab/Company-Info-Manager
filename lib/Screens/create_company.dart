import 'dart:io';
import 'package:company_app/services/api_services.dart';
import 'package:company_app/services/database_services.dart';
import 'package:flutter/material.dart';
import 'package:company_app/utils/image_pick.dart';
import 'package:company_app/model/company_model.dart';

class CreateCompany extends StatefulWidget {
  final int? id;
  final String name;
  final String address;
  final String phone;
  final String logo; // This is a URL for the logo
  final bool isEditing;

  const CreateCompany({
    super.key,
    this.id,
    required this.name,
    required this.address,
    required this.phone,
    required this.logo,
    this.isEditing = false,
  });

  @override
  State<CreateCompany> createState() => _CreateCompanyState();
}

class _CreateCompanyState extends State<CreateCompany> {
  late TextEditingController _nameController;
  late TextEditingController _addressController;
  late TextEditingController _phoneController;
  final GlobalKey<FormState> _key = GlobalKey();
  File? _selectedImage; // Store selected image

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.name);
    _addressController = TextEditingController(text: widget.address);
    _phoneController = TextEditingController(text: widget.phone);
  }

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  // Function to save the company to the database
  Future<void> _saveToDatabase() async {
    if (_key.currentState!.validate()) {
      // Gather the data
      String name = _nameController.text;
      String address = _addressController.text;
      String phone = _phoneController.text;
      String logo = ''; // If no image is selected, leave logo as empty string

      if (_selectedImage != null) {
        // Here you can save the image to the server or local storage if needed
        logo =
            _selectedImage!.path; // Save image path as logo for local storage
      } else if (widget.logo.isNotEmpty) {
        // If the logo URL is already provided (for editing)
        logo = widget.logo;
      }

      // Create a Company object
      Company company = Company(
        id: 0, // For a new company, ID is set to 0. It will be auto-generated by DB.
        logo: logo,
        companyName: name,
        companyNumber: phone,
        companyAddress: address,
      );

      // Save company to database
      await DatabaseHelper.instance.insertCompany(company);

      // Show confirmation message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Company saved to database')),
      );
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue.shade300,
        foregroundColor: Colors.white,
        centerTitle: true,
        title: Text(
          widget.isEditing
              ? "Update Company Information"
              : "Add Company Information",
        ),
      ),
      body: Form(
        key: _key,
        child: SingleChildScrollView(
          child: Column(
            children: [
              const SizedBox(height: 15),
              Center(
                child: GestureDetector(
                  onTap: () async {
                    // Show dialog for choosing camera or gallery
                    await showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: const Text("Select Image"),
                          content: const Text(
                              "Choose an option to upload your image."),
                          actions: [
                            TextButton(
                              onPressed: () async {
                                // Close the dialog
                                Navigator.pop(context);

                                // Capture image from camera
                                final imageHelper = ImagePickerHelper();
                                await imageHelper
                                    .captureImageFromCamera(context);
                                setState(() {
                                  _selectedImage = imageHelper
                                      .selectedImage; // Update the image
                                });
                              },
                              child: const Text("Camera"),
                            ),
                            TextButton(
                              onPressed: () async {
                                // Close the dialog
                                Navigator.pop(context);

                                // Pick image from gallery
                                final imageHelper = ImagePickerHelper();
                                await imageHelper.pickImageFromGallery(context);
                                setState(() {
                                  _selectedImage = imageHelper
                                      .selectedImage; // Update the image
                                });
                              },
                              child: const Text("Gallery"),
                            ),
                            TextButton(
                              onPressed: () {
                                Navigator.pop(
                                    context); // Close the dialog without any action
                              },
                              child: const Text("Cancel"),
                            ),
                          ],
                        );
                      },
                    );
                  },
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      ClipOval(
                        child: Container(
                          color: Colors.blueAccent.withOpacity(0.2),
                          width: 75,
                          height: 75,
                          child: _selectedImage == null
                              ? (widget.logo.isEmpty
                                  ? const Icon(
                                      Icons.camera_alt,
                                      size: 30,
                                      color: Colors.blue,
                                    )
                                  : Image.network(
                                      widget
                                          .logo, // Show current logo image if available
                                      fit: BoxFit.cover,
                                      width: 75,
                                      height: 75,
                                    ))
                              : Image.file(
                                  _selectedImage!,
                                  fit: BoxFit.cover,
                                  width: 75,
                                  height: 75,
                                ),
                        ),
                      ),
                      const SizedBox(height: 8),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 15),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: TextFormField(
                  validator: (value) {
                    if (value!.isEmpty) {
                      return "Please enter company name";
                    }
                    return null;
                  },
                  controller: _nameController,
                  decoration: const InputDecoration(
                    labelText: "Name",
                    hintText: "Enter the company name",
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: TextFormField(
                  controller: _addressController,
                  decoration: const InputDecoration(
                    labelText: "Address",
                    hintText: "Enter the company address",
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: TextFormField(
                  controller: _phoneController,
                  decoration: const InputDecoration(
                    labelText: "Phone Number",
                    hintText: "Enter the company phone number",
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
              const SizedBox(height: 15),
              Column(
                children: [
                  ElevatedButton(
                    onPressed: () async {
                      if (_key.currentState!.validate()) {
                        try {
                          Company company = Company(
                            id: widget.isEditing ? (widget.id ?? 0) : 0,
                            logo: widget.logo,
                            companyName: _nameController.text,
                            companyNumber: _phoneController.text,
                            companyAddress: _addressController.text,
                          );

                          if (widget.isEditing) {
                            await ApiServices()
                                .updateCompany(company.id, company);
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                  content:
                                      Text('Company updated successfully')),
                            );
                          } else {
                            await ApiServices().createCompany(company);
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                  content:
                                      Text('Company created successfully')),
                            );
                          }

                          Navigator.pop(context);
                        } catch (e) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Error: $e')),
                          );
                        }
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue.shade300,
                      foregroundColor: Colors.white,
                      fixedSize: const Size(200, 50),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    child: Text(widget.isEditing
                        ? "Update Information"
                        : "Create Company"),
                  ),
                  const SizedBox(height: 30.0),
                  ElevatedButton(
                    onPressed:
                        _saveToDatabase, // Save to database functionality
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue.shade300,
                      foregroundColor: Colors.white,
                      fixedSize: const Size(200, 50),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    child: const Text("Save To Database"),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
